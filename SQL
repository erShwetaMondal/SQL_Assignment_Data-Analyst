use classicmodels;
/*Day-3*/
/*1)	Show customer number, customer name, state and credit limit from customers table for below conditions. Sort the results by highest to lowest values of creditLimit.

●	State should not contain null values
●	credit limit should be between 50000 and 1000008*/

SELECT customerNumber, customerName, state, creditLimit
FROM customers
WHERE state IS NOT NULL
AND creditLimit BETWEEN 50000 AND 100000
ORDER BY creditLimit DESC;

/*2)	Show the unique productline values containing the word cars at the end from products table.*/

SELECT DISTINCT productLine
FROM products
WHERE productLine LIKE '%cars';

-------------------------------------------------------------------------------------------------------------------------------------

/*Day-4*/

/*1)	Show the orderNumber, status and comments from orders table for shipped status only. If some comments are having null values then show them as “-“.*/

SELECT orderNumber, status, COALESCE(comments, '-') AS comments
FROM orders
WHERE status = 'Shipped';

/*2)	Select employee number, first name, job title and job title abbreviation from employees table based on following conditions.
If job title is one among the below conditions, then job title abbreviation column should show below forms.
●	President then “P”
●	Sales Manager / Sale Manager then “SM”
●	Sales Rep then “SR”
●	Containing VP word then “VP” */

SELECT employeeNumber, firstName, jobTitle,
    CASE 
        WHEN jobTitle = 'President' THEN 'P'
        WHEN jobTitle = 'Sales Manager' THEN 'SM'
        WHEN jobTitle = 'Sales Rep' THEN 'SR'
        WHEN jobTitle LIKE '%VP%' THEN 'VP'
             ELSE 'SM'
    END AS jobTitleAbbreviation
FROM employees;

-------------------------------------------------------------------------------------------------------------------------------------

/*Day 5:*/

/* 1)	For every year, find the minimum amount value from payments table.*/

SELECT YEAR(paymentDate) AS paymentYear, MIN(amount) AS minimumAmount
FROM payments
GROUP BY YEAR(paymentDate)
ORDER BY paymentYear  asc;

/*2)	For every year and every quarter, find the unique customers and total orders from orders table. Make sure to show the quarter as Q1,Q2 etc.*/

SELECT 
    year(orderDate) AS "orderYear",
    CONCAT('Q', quarter(orderDate)) AS "Order Quarter",
    count(distinct customernumber) AS "UNIQUE CUSTOMERS",
    count(orderNumber) AS "TOTAL ORDERS"
  FROM 
    orders
    group by  year(orderDate),
    CONCAT('Q', quarter(orderDate));

/*3)	Show the formatted amount in thousands unit (e.g. 500K, 465K etc.) for every month (e.g. Jan, Feb etc.) with filter on total amount as 500000 to 1000000. Sort the output by total amount in descending mode. [ Refer. Payments Table]*/
select * from payments;
SELECT 
    DATE_FORMAT(paymentDate, '%M') AS month,
    CONCAT(round(sum(amount)/1000, 0), 'K') AS formattedAmount
FROM 
    payments
group by month
HAVING sum(amount) between 500000 and 1000000
ORDER BY 
    sum(amount) DESC;

-------------------------------------------------------------------------------------------------------------------------------------

/*Day 6:*/

/*1)	Create a journey table with following fields and constraints.

●	Bus_ID (No null values)
●	Bus_Name (No null values)
●	Source_Station (No null values)
●	Destination (No null values)
●	Email (must not contain any duplicates)*/


CREATE TABLE Journey (
  Bus_ID INT NOT NULL,
  Bus_Name VARCHAR(100) NOT NULL,
  Source_Station VARCHAR(100) NOT NULL,
  Destination VARCHAR(100) NOT NULL,
  Email VARCHAR(100) NOT NULL,
  CONSTRAINT UQ_Email UNIQUE (Email)
);
describe table journey;

/*2)	Create vendor table with following fields and constraints.

●	Vendor_ID (Should not contain any duplicates and should not be null)
●	Name (No null values)
●	Email (must not contain any duplicates)
●	Country (If no data is available then it should be shown as “N/A”)*/

CREATE TABLE Vendor (
  Vendor_ID INT NOT NULL,
  Name VARCHAR(100) NOT NULL,
  Email VARCHAR(100) NOT NULL,
  Country VARCHAR(100) DEFAULT 'N/A',
  CONSTRAINT PK_Vendor PRIMARY KEY (Vendor_ID),
  CONSTRAINT UQ_Email UNIQUE (Email)
);
describe table Vendor;


/* 3)	Create movies table with following fields and constraints.

●	Movie_ID (Should not contain any duplicates and should not be null)
●	Name (No null values)
●	Release_Year (If no data is available then it should be shown as “-”)
●	Cast (No null values)
●	Gender (Either Male/Female)
●	No_of_shows (Must be a positive number)*/

CREATE TABLE movies (
  Movie_ID INT NOT NULL UNIQUE,
  Name VARCHAR(100) NOT NULL,
  Release_Year VARCHAR(10) DEFAULT '-',
  Cast VARCHAR(255) NOT NULL,
  Gender ENUM('Male', 'Female'),
  No_of_shows INT CHECK (No_of_shows > 0),
  PRIMARY KEY (Movie_ID)
);
describe table movies;

/*4)	Create the following tables. Use auto increment wherever applicable

a. Product
✔	product_id - primary key
✔	product_name - cannot be null and only unique values are allowed
✔	description
✔	supplier_id - foreign key of supplier table

b. Suppliers
✔	supplier_id - primary key
✔	supplier_name
✔	location

c. Stock
✔	id - primary key
✔	product_id - foreign key of product table
✔	balance_stock*/

-- Create the Suppliers table
CREATE TABLE Suppliers (
  supplier_id INT AUTO_INCREMENT PRIMARY KEY,
  supplier_name VARCHAR(100),
  location VARCHAR(100)
);
describe table Suppliers;

-- Create the Product table
CREATE TABLE Product (
  product_id INT AUTO_INCREMENT PRIMARY KEY,
  product_name VARCHAR(100) NOT NULL UNIQUE,
  description VARCHAR(255),
  supplier_id INT,
  FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)
);
describe table product;

-- Create the Stock table
CREATE TABLE Stock (
  id INT AUTO_INCREMENT PRIMARY KEY,
  product_id INT,
  balance_stock INT,
  FOREIGN KEY (product_id) REFERENCES Product(product_id)
);
describe table stock;

-------------------------------------------------------------------------------------------------------------------------------------

/*Day 7*/
/*1)	Show employee number, Sales Person (combination of first and last names of employees), unique customers for each employee number and sort the data by highest to lowest unique customers.
Tables: Employees, Customers*/
    
SELECT e.employeeNumber, CONCAT(e.firstName, ' ', e.lastName) AS salesPerson, COUNT(DISTINCT c.customerNumber) AS uniqueCustomers
FROM employees e
LEFT JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber
GROUP BY e.employeeNumber, salesPerson
ORDER BY uniqueCustomers DESC;

/*2)	Show total quantities, total quantities in stock, left over quantities for each product and each customer. Sort the data by customer number.

Tables: Customers, Orders, Orderdetails, Products*/

SELECT c.customerNumber, c.customerName, p.productCode, p.productName, SUM(od.quantityOrdered) AS totalQuantities, p.quantityInStock, (p.quantityInStock - SUM(od.quantityOrdered)) AS leftoverQuantities
FROM customers c
JOIN orders o ON c.customerNumber = o.customerNumber
JOIN orderdetails od ON o.orderNumber = od.orderNumber
JOIN products p ON od.productCode = p.productCode
GROUP BY c.customerNumber, c.customerName, p.productCode, p.productName
ORDER BY c.customerNumber;

/*3)	Create below tables and fields. (You can add the data as per your wish)

●	Laptop: (Laptop_Name)
●	Colours: (Colour_Name)
Perform cross join between the two tables and find number of rows.*/

CREATE TABLE Laptop (
  Laptop_Name VARCHAR(50) NOT NULL
);
INSERT INTO laptop VALUES('DELL');
INSERT INTO laptop VALUES('HP');

CREATE TABLE Colours (
  Colour_Name VARCHAR(50) NOT NULL
);
INSERT INTO colours VALUES('White');
INSERT INTO colours VALUES('Silver');
INSERT INTO colours VALUES('Black');

SELECT *
FROM Laptop
CROSS JOIN Colours
ORDER BY Laptop_Name asc;



/*4)	Create table project with below fields.

●	EmployeeID
●	FullName
●	Gender
●	ManagerID
Add below data into it.
INSERT INTO Project VALUES(1, 'Pranaya', 'Male', 3);
INSERT INTO Project VALUES(2, 'Priyanka', 'Female', 1);
INSERT INTO Project VALUES(3, 'Preety', 'Female', NULL);
INSERT INTO Project VALUES(4, 'Anurag', 'Male', 1);
INSERT INTO Project VALUES(5, 'Sambit', 'Male', 1);
INSERT INTO Project VALUES(6, 'Rajesh', 'Male', 3);
INSERT INTO Project VALUES(7, 'Hina', 'Female', 3);
Find out the names of employees and their related managers.*/

CREATE TABLE project (
  EmployeeID INT NOT NULL,
  FullName VARCHAR(50) NOT NULL,
  Gender VARCHAR(10) NOT NULL,
  ManagerID INT
);

INSERT INTO project VALUES (1, 'Pranaya', 'Male', 3);
INSERT INTO project VALUES (2, 'Priyanka', 'Female', 1);
INSERT INTO project VALUES (3, 'Preety', 'Female', NULL);
INSERT INTO project VALUES (4, 'Anurag', 'Male', 1);
INSERT INTO project VALUES (5, 'Sambit', 'Male', 1);
INSERT INTO project VALUES (6, 'Rajesh', 'Male', 3);
INSERT INTO project VALUES (7, 'Hina', 'Female', 3);

SELECT p.FullName AS Employee, m.FullName AS Manager
FROM project p
INNER JOIN project m ON p.ManagerID = m.EmployeeID;

-------------------------------------------------------------------------------------------------------------------------------------

/*Day 8
Create table facility. Add the below fields into it.
●	Facility_ID
●	Name
●	State
●	Country

i) Alter the table by adding the primary key and auto increment to Facility_ID column.
ii) Add a new column city after name with data type as varchar which should not accept any null values.*/
 
 CREATE TABLE facility (
  Facility_ID INT,
  Name VARCHAR(100),
  State VARCHAR(100),
  Country VARCHAR(100)
);

ALTER TABLE facility
MODIFY COLUMN Facility_ID INT AUTO_INCREMENT PRIMARY KEY;

ALTER TABLE facility
ADD COLUMN City VARCHAR(100) NOT NULL AFTER Name;

describe  facility;

-------------------------------------------------------------------------------------------------------------------------------------

/*Day 9
Create table university with below fields.
●	ID
●	Name
Add the below data into it as it is.
INSERT INTO University
VALUES (1, "       Pune          University     "), 
               (2, "  Mumbai          University     "),
              (3, "     Delhi   University     "),
              (4, "Madras University"),
              (5, "Nagpur University");
Remove the spaces from everywhere and update the column like Pune University etc.*/

CREATE TABLE university (
  ID INT,
  Name VARCHAR(50)
);

INSERT INTO university
VALUES (1, "Pune  University"),
       (2, "Mumbai University"),
       (3, "Delhi University"),
       (4, "Madras University"),
       (5, "Nagpur University"),
       (NULL,"NULL");
       
UPDATE university
SET Name = TRIM(BOTH ' ' FROM Name);
select * from university;

-------------------------------------------------------------------------------------------------------------------------------------

/*Day 10
Create the view products status. Show year wise total products sold. Also find the percentage of total value for each year. The output should look as shown in below figure.*/
 
 drop view products_status;
 
CREATE VIEW products_status AS
SELECT YEAR(o.orderDate) AS 'Year',
CONCAT(COUNT(productCode), "(", CONCAT(ROUND((COUNT(productCode) / (SELECT SUM(orderNumber) FROM orders)) * 100, 2), "%")) AS percentage_of_total_value
FROM orders o INNER JOIN orderdetails od USING(OrderNumber)
GROUP BY YEAR
ORDER BY CONCAT(productCode) DESC;

SELECT * FROM products_status;

-------------------------------------------------------------------------------------------------------------------------------------

/*Day 11
	1)	Create a stored procedure GetCustomerLevel which takes input as customer number and gives the output as either Platinum, Gold or Silver as per below criteria.

	Table: Customers

	●	Platinum: creditLimit > 100000
	●	Gold: creditLimit is between 25000 to 100000
	●	Silver: creditLimit < 25000*/

DELIMITER $$
CREATE PROCEDURE GetCustomerLevel (IN customerNumber INT)
BEGIN
  DECLARE creditLimit DECIMAL(10, 2);
  DECLARE customerLevel VARCHAR(20);
  
  SELECT CreditLimit INTO creditLimit FROM Customers WHERE CustomerNumber = customerNumber;
  
  IF creditLimit > 100000 THEN
    SET customerLevel = 'Platinum';
  ELSEIF creditLimit >= 25000 AND creditLimit <= 100000 THEN
    SET customerLevel = 'Gold';
  ELSE
    SET customerLevel = 'Silver';
  END IF;
  
  SELECT customerLevel AS CustomerLevel;
END $$

CALL GetCustomerLevel(12345,CreditLimit);
select CreditLimit;



/*2)	Create a stored procedure Get_country_payments which takes in year and country as inputs and gives year wise, country wise total amount as an output. Format the total amount to nearest thousand unit (K)
Tables: Customers, Payments */

DELIMITER $$
CREATE PROCEDURE Get_country_payments (IN inputYear INT, IN inputCountry VARCHAR(50))
BEGIN
    SELECT 
        YEAR(p.PaymentDate) AS Year,
        c.Country,
        CONCAT(FORMAT(SUM(p.Amount) / 1000, 0), 'K') AS TotalAmount
    FROM 
        Payments p
    INNER JOIN 
        Customers c ON p.CustomerNumber = c.CustomerNumber
    WHERE 
        YEAR(p.PaymentDate) = inputYear
        AND c.Country = inputCountry
    GROUP BY 
        YEAR(p.PaymentDate), c.Country;
END $$

CALL Get_country_payments('2003', 'France');

drop procedure Get_country_payments;
-------------------------------------------------------------------------------------------------------------------------------------

/*Day 12*/
/*1)	Calculate year wise, month name wise count of orders and year over year (YoY) percentage change. Format the YoY values in no decimals and show in % sign.
Table: Orders*/


select * from orders;
SELECT
YEAR(orderDate) AS Year,
MONTHNAME(orderDate) AS Month,
COUNT(*) AS OrderCount,
CONCAT(ROUND(((COUNT(orderNumber) - LAG(COUNT(orderNumber),1) OVER()) / LAG(COUNT(orderNumber),1) OVER())*100), "%") AS "% YoY Change"
FROM
orders
GROUP BY
YEAR(orderDate),
MONTHNAME(orderDate);

/*2)	Create the table emp_udf with below fields.

●	Emp_ID
●	Name
●	DOB
Add the data as shown in below query.
INSERT INTO Emp_UDF(Name, DOB)
VALUES ("Piyush", "1990-03-30"), ("Aman", "1992-08-15"), ("Meena", "1998-07-28"), ("Ketan", "2000-11-21"), ("Sanjay", "1995-05-21");
Create a user defined function calculate_age which returns the age in years and months (e.g. 30 years 5 months) by accepting DOB column as a parameter.*/

CREATE TABLE emp_udf (
    Emp_ID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(50),
    DOB DATE
);

INSERT INTO emp_udf(Name, DOB) VALUES ("Piyush", "1990-03-30"), ("Aman", "1992-08-15"), ("Meena", "1998-07-28"), ("Ketan", "2000-11-21"), ("Sanjay", "1995-05-21");


CREATE FUNCTION calculate_age(DOB DATE)
RETURNS VARCHAR(50)
BEGIN
    DECLARE age_years INT;
    DECLARE age_months INT;
    DECLARE age_string VARCHAR(50);
    
    SET age_years = TIMESTAMPDIFF(YEAR, DOB, CURDATE());
    SET age_months = TIMESTAMPDIFF(MONTH, DOB, CURDATE()) % 12;
    
    SET age_string = CONCAT(age_years, ' years ', age_months, ' months');
    
    RETURN age_string;
END;




-------------------------------------------------------------------------------------------------------------------------------------

/*Day 13
1)	Display the customer numbers and customer names from customers table who have not placed any orders using subquery

Table: Customers, Orders*/

 
SELECT CustomerNumber, CustomerName
FROM Customers
WHERE CustomerNumber NOT IN (SELECT CustomerNumber FROM Orders);

/*2)	Write a full outer join between customers and orders using union and get the customer number, customer name, count of orders for every customer.
Table: Customers, Orders*/

 SELECT c.CustomerNumber, c.CustomerName, COUNT(o.OrderNumber) AS OrderCount
FROM Customers c
LEFT JOIN Orders o ON c.CustomerNumber = o.CustomerNumber
GROUP BY c.CustomerNumber, c.CustomerName

UNION

SELECT c.CustomerNumber, c.CustomerName, COUNT(o.OrderNumber) AS OrderCount
FROM Customers c
RIGHT JOIN Orders o ON c.CustomerNumber = o.CustomerNumber
GROUP BY c.CustomerNumber, c.CustomerName;


/* 3)	Show the second highest quantity ordered value for each order number.
Table: Orderdetails */

 SELECT OrderNumber, MAX(quantityOrdered) AS SecondHighestQuantity
FROM Orderdetails
WHERE quantityOrdered < (SELECT MAX(quantityOrdered) FROM Orderdetails)
GROUP BY OrderNumber;

/*4)	For each order number count the number of products and then find the min and max of the values among count of orders.
Table: Orderdetails */

SELECT MIN(TOTAL), MAX(Total)
FROM (
    SELECT OrderNumber, COUNT(productcode) AS Total
    FROM Orderdetails
    GROUP BY OrderNumber
) AS Shweta;




/*5)	Find out how many product lines are there for which the buy price value is greater than the average of buy price value. 
Show the output as product line and its count.*/

SELECT ProductLine, COUNT(*) AS Count
FROM Products
WHERE BuyPrice > (SELECT AVG(BuyPrice) FROM Products)
GROUP BY ProductLine
ORDER BY Count desc;

-------------------------------------------------------------------------------------------------------------------------------------

/*Day 14
Create the table Emp_EH. Below are its fields.
●	EmpID (Primary Key)
●	EmpName
●	EmailAddress
Create a procedure to accept the values for the columns in Emp_EH.
Handle the error using exception handling concept. Show the message as “Error occurred” in case of anything wrong.*/

drop TABLE IF EXISTS Emp_EH;

CREATE TABLE Emp_EH (
  EmpID INT PRIMARY KEY,
  EmpName VARCHAR(50),
  EmailAddress VARCHAR(100)
);

-- Create the procedure to accept values for Emp_EH

DROP PROCEDURE Insert_Emp_EH;

DELIMITER //

CREATE PROCEDURE `Insert_Emp_EH`(
  IN p_EmpID INT,
  IN p_EmpName VARCHAR(50),
  IN p_EmailAddress VARCHAR(100)
)
BEGIN
  DECLARE error_occurred BOOLEAN DEFAULT FALSE;
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET error_occurred = TRUE;
  START TRANSACTION;
  INSERT INTO `Emp_EH` (`EmpID`, `EmpName`, `EmailAddress`)
  VALUES (p_EmpID, p_EmpName, p_EmailAddress);
  IF error_occurred THEN
    ROLLBACK;
    SELECT 'Error occurred' AS Message;
  ELSE
    COMMIT;
    SELECT 'Data inserted successfully' AS Message;
  END IF;
END //
DELIMITER ;

CALL Insert_Emp_EH(1, 'Shweta Mondal', 'shwetamondal14@gmail.com');
CALL Insert_Emp_EH(2, 'Tina Mondal', 'tinaamondal14@gmail.com');

-------------------------------------------------------------------------------------------------------------------------------------

/*Day 15
/*Create the table Emp_BIT. Add below fields in it.
●	Name
●	Occupation
●	Working_date
●	Working_hours*/

CREATE TABLE Emp_BIT (
  Name VARCHAR(100),
  Occupation VARCHAR(100),
  Working_date DATE,
  Working_hours INT
);

/*Insert the data as shown in below query.
INSERT INTO Emp_BIT VALUES
('Robin', 'Scientist', '2020-10-04', 12),  
('Warner', 'Engineer', '2020-10-04', 10),  
('Peter', 'Actor', '2020-10-04', 13),  
('Marco', 'Doctor', '2020-10-04', 14),  
('Brayden', 'Teacher', '2020-10-04', 12),  
('Antonio', 'Business', '2020-10-04', 11); */ 

INSERT INTO Emp_BIT VALUES
('Robin', 'Scientist', '2020-10-04', 12),
('Warner', 'Engineer', '2020-10-04', 10),
('Peter', 'Actor', '2020-10-04', 13),
('Marco', 'Doctor', '2020-10-04', 14),
('Brayden', 'Teacher', '2020-10-04', 12),
('Antonio', 'Business', '2020-10-04', 11);

SELECT * FROM Emp_BIT;
 
/*Create before insert trigger to make sure any new value of Working_hours, if it is negative, then it should be inserted as positive.*/

DELIMITER $$
CREATE TRIGGER before_insert_Working_hours
BEFORE INSERT ON Emp_BIT
FOR EACH ROW
BEGIN
  IF NEW.Working_hours < 0 THEN SET NEW.Working_hours = 'W_H';
  END IF;
END$$

INSERT INTO Emp_BIT (Name, Occupation, Working_date, Working_hours)
VALUES ('Shweta', 'Manager', '2020-10-04', ABS(-5));
